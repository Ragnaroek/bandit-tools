{"version":3,"sources":["App.js","index.js"],"names":["AppState","App","props","state","e","app","this","reader","FileReader","onloadend","setState","stateData","JSON","parse","result","readAsText","target","files","Papa","complete","results","logData","console","log","Navbar","bg","expand","Brand","href","Form","inline","Badge","pill","variant","FormControl","type","onChange","stateSelect","logSelect","str","split","vals","key","hasOwnProperty","push","arm","niceName","val","sort","a","b","parseInt","i","data","length","line","parseFloat","updateData","transformToTimeSeriesUpdate","Row","Col","domainPadding","width","height","label","fixLabelOverlap","dependentAxis","axisLabelComponent","dy","style","strokeWidth","strokeLinecap","xs","md","lg","margin","countData","transformToChartData","counts","rewardData","values","x","y","max","highest","hRewardArm","hReward","hCountArm","hCount","toPrecision","min","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","reward","regret","sum","minMaxReward","regretAndAvg","avg","Card","stateDataSummary","logDataSummary","Container","countChartsRow","summaryPanel","logChartsRow","navigation","renderCharts","Component","ReactDOM","render","document","getElementById"],"mappings":"oUAaMA,E,kCAgPSC,E,kDAzOb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,IAAIH,EAFA,E,+CAKnB,SAAYI,GACV,IAAIC,EAAMC,KACNC,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjBJ,EAAIK,SAAS,CAACC,UAAWC,KAAKC,MAAMN,EAAOO,WAE7CP,EAAOQ,WAAWX,EAAEY,OAAOC,MAAM,M,uBAGnC,SAAUb,GACR,IAAIC,EAAMC,KACVY,QAAWd,EAAEY,OAAOC,MAAM,GAAI,CAC5BE,SAAU,SAASC,GACjBf,EAAIK,SAAS,CAACW,QAASD,IACvBE,QAAQC,IAAI,UAAWH,Q,wBAK7B,WAAc,IAAD,OACX,OAAO,eAACI,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UACK,cAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAnB,0BACE,eAACC,EAAA,EAAD,CAAMC,QAAM,EAAZ,UACE,cAACC,EAAA,EAAD,CAAOC,MAAI,EAACC,QAAQ,OAApB,yBACA,cAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,SAAU,SAAChC,GAAD,OAAO,EAAKiC,YAAYjC,SAE7D,eAACyB,EAAA,EAAD,CAAMC,QAAM,EAAZ,UACE,cAACC,EAAA,EAAD,CAAOC,MAAI,EAACC,QAAQ,OAApB,uBACA,cAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,SAAU,SAAChC,GAAD,OAAO,EAAKkC,UAAUlC,c,sBAK3E,SAASmC,GACP,OAAOA,EAAIC,MAAM,KAAK,K,kCAGxB,SAAqBC,GACnB,IAAI3B,EAAS,GAEb,IAAK,IAAI4B,KAAOD,EACTA,EAAKE,eAAeD,IACzB5B,EAAO8B,KAAK,CAACC,IAAKvC,KAAKwC,SAASJ,GAAMK,IAAKN,EAAKC,KASlD,OANA5B,EAAOkC,MAAK,SAACC,EAAGC,GAGZ,OAFSC,SAASF,EAAEJ,IAAK,IAChBM,SAASD,EAAEL,IAAK,OAItB/B,I,yCAGT,SAA4BO,GAE1B,IADA,IAAIP,EAAS,GACJsC,EAAI,EAAGA,EAAI/B,EAAQgC,KAAKC,OAAQF,IAAK,CAC5C,IAAIG,EAAOlC,EAAQgC,KAAKD,GACR,WAAZG,EAAK,IACPzC,EAAO8B,KAAKY,WAAWD,EAAK,KAGhC,OAAOzC,I,0BAGT,WACE,GAAGR,KAAKH,MAAMkB,QAAS,CAErB,IAAIoC,EAAanD,KAAKoD,4BAA4BpD,KAAKH,MAAMkB,SAE7D,OAAO,cAACsC,EAAA,EAAD,UACL,cAACC,EAAA,EAAD,UACE,eAAC,IAAD,CAAcC,cAAe,GAAIC,MAAO,KAAMC,OAAQ,IAAtD,UACE,cAAC,IAAD,CAAaC,MAAM,QAAQC,iBAAiB,IAC5C,cAAC,IAAD,CAAaD,MAAM,gBAAgBE,eAAe,EAAMC,mBAAoB,cAAC,IAAD,CAAcC,IAAK,OAC/F,cAAC,IAAD,CAAaf,KAAMI,EACNY,MAAO,CAAEhB,KAAM,CAAEiB,YAAa,EAAGC,cAAe,mBAKnE,OAAO,cAACZ,EAAA,EAAD,UACL,cAACC,EAAA,EAAD,CAAKY,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIL,MAAO,CAACM,OAAO,QAA5C,SACE,uF,4BAMR,WACE,GAAGrE,KAAKH,MAAMQ,UAAW,CACvB,IAAIiE,EAAYtE,KAAKuE,qBAAqBvE,KAAKH,MAAMQ,UAAUmE,QAC3DC,EAAazE,KAAKuE,qBAAqBvE,KAAKH,MAAMQ,UAAUqE,QAEhE,OAAO,gCACH,cAACpB,EAAA,EAAD,UACE,eAAC,IAAD,CAAcC,cAAe,GAA7B,UACE,cAAC,IAAD,CAAaG,MAAM,OAAOC,iBAAiB,IAC3C,cAAC,IAAD,CAAaD,MAAM,aAAaE,eAAe,EAAMC,mBAAoB,cAAC,IAAD,CAAcC,IAAK,OAC5F,cAAC,IAAD,CAAYf,KAAMuB,EAAWK,EAAE,MAAMC,EAAE,aAG3C,cAACtB,EAAA,EAAD,UACE,eAAC,IAAD,CAAcC,cAAe,GAA7B,UACE,cAAC,IAAD,CAAaG,MAAM,OAAOC,iBAAiB,IAC3C,cAAC,IAAD,CAAaD,MAAM,wBAAwBE,eAAe,EAAMC,mBAAoB,cAAC,IAAD,CAAcC,IAAK,OACvG,cAAC,IAAD,CAAYf,KAAM0B,EAAYE,EAAE,MAAMC,EAAE,gBAKhD,OAAO,cAACtB,EAAA,EAAD,CAAKY,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIL,MAAO,CAACM,OAAO,QAA5C,SACH,yF,qBAKR,SAAQtB,GACN,IAAIR,EAAM,IACNsC,GAAO,EACX,IAAK,IAAIzC,KAAOW,EACd,GAAKA,EAAKV,eAAeD,GAAzB,CACA,IAAIK,EAAMM,EAAKX,GAEZK,EAAMoC,IACPA,EAAMpC,EACNF,EAAMH,GAGV,MAAO,CAACpC,KAAKwC,SAASD,GAAMsC,K,8BAG9B,WACE,GAAG7E,KAAKH,MAAMQ,UAAW,CACvB,MAA4BL,KAAK8E,QAAQ9E,KAAKH,MAAMQ,UAAUqE,QAA9D,mBAAKK,EAAL,KAAiBC,EAAjB,KACA,EAA0BhF,KAAK8E,QAAQ9E,KAAKH,MAAMQ,UAAUmE,QAA5D,mBAAKS,EAAL,KAAgBC,EAAhB,KAEA,OAAO,gCACL,4DAA+BH,EAA/B,KAA6CC,EAAQG,YAAY,GAAjE,OACA,2DAA8BF,EAA9B,KAA2CC,EAA3C,a,0BAKN,SAAanE,GAGX,IAFA,IAAIqE,EAAMC,OAAOC,iBACbT,EAAMQ,OAAOE,iBACRzC,EAAI,EAAGA,EAAI/B,EAAQgC,KAAKC,OAAQF,IAAK,CAC5C,IAAIG,EAAOlC,EAAQgC,KAAKD,GACxB,GAAgB,WAAZG,EAAK,GAAiB,CACxB,IAAIuC,EAAStC,WAAWD,EAAK,IAC1BuC,EAASJ,IACVA,EAAMI,GAELA,EAASX,IACVA,EAAMW,IAIZ,MAAO,CAACJ,EAAKP,K,0BAGf,SAAa9D,EAAS8D,GAGpB,IAFA,IAAIY,EAAS,EACTC,EAAO,EACF5C,EAAI,EAAGA,EAAI/B,EAAQgC,KAAKC,OAAQF,IAAK,CAC5C,IAAIG,EAAOlC,EAAQgC,KAAKD,GACxB,GAAgB,WAAZG,EAAK,GAAiB,CACxB,IAAIuC,EAAStC,WAAWD,EAAK,IAC7BwC,GAAUZ,EAAMW,EAChBE,GAAOF,GAIX,MAAO,CAACC,EADEC,EAAI3E,EAAQgC,KAAKC,U,4BAI7B,WACE,GAAGhD,KAAKH,MAAMkB,QAAS,CAErB,MAAiBf,KAAK2F,aAAa3F,KAAKH,MAAMkB,SAA9C,mBAAKqE,EAAL,KAAUP,EAAV,KACA,EAAoB7E,KAAK4F,aAAa5F,KAAKH,MAAMkB,QAAS8D,GAA1D,mBAAKY,EAAL,KAAaI,EAAb,KAEA,OAAO,gCACL,uCACA,iDAAoBJ,EAAON,YAAY,GAAvC,WACA,gDAAmBC,EAAID,YAAY,GAAnC,WACA,gDAAmBN,EAAIM,YAAY,GAAnC,WACA,gDAAmBU,EAAIV,YAAY,GAAnC,iB,0BAKN,WACE,GAAGnF,KAAKH,MAAMQ,WAAaL,KAAKH,MAAMkB,QACpC,OAAO,cAACuC,EAAA,EAAD,CAAKY,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxB,SACL,eAAC0B,EAAA,EAAD,WACG9F,KAAK+F,mBACL/F,KAAKgG,wB,0BAMd,WACI,OAAO,eAACC,EAAA,EAAD,WACL,eAAC5C,EAAA,EAAD,WACGrD,KAAKkG,iBACLlG,KAAKmG,kBAEPnG,KAAKoG,oB,oBAIZ,WACE,OACE,gCACE,iCACCpG,KAAKqG,eAEN,+BACCrG,KAAKsG,wB,GApOIC,aCdlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.76ffc7ba.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryLabel, VictoryLine } from 'victory';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Card from 'react-bootstrap/Card'\nimport Badge from 'react-bootstrap/Badge'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Form from 'react-bootstrap/Form'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport * as Papa from 'papaparse'\n\nclass AppState {\n  stateData: Object\n  logData: Object\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = new AppState();\n  }\n\n  stateSelect(e) {\n    let app = this;\n    let reader = new FileReader();\n    reader.onloadend = () => {\n      app.setState({stateData: JSON.parse(reader.result)});\n    };\n    reader.readAsText(e.target.files[0]);\n  }\n\n  logSelect(e) {\n    let app = this;\n    Papa.parse(e.target.files[0], {\n      complete: function(results) {\n        app.setState({logData: results});\n        console.log(\"result=\", results);\n      }\n    })\n  }\n\n  navigation() {\n    return <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Brand href=\"#home\">Bandit Tools</Navbar.Brand>\n                  <Form inline>\n                    <Badge pill variant=\"info\">State File:</Badge>\n                    <FormControl type=\"file\" onChange={(e) => this.stateSelect(e)}/>\n                  </Form>\n                  <Form inline>\n                    <Badge pill variant=\"info\">Log File:</Badge>\n                    <FormControl type=\"file\" onChange={(e) => this.logSelect(e)}/>\n                  </Form>\n           </Navbar>\n  }\n\n  niceName(str) {\n    return str.split(\":\")[1];\n  }\n\n  transformToChartData(vals) {\n    let result = [];\n\n    for (var key in vals) {\n      if (!vals.hasOwnProperty(key)) continue;\n      result.push({arm: this.niceName(key), val: vals[key]});\n    }\n\n    result.sort((a, b) => {\n        let t1 = parseInt(a.arm, 10);\n        let t2 = parseInt(b.arm, 10);\n        return t1 - t2;\n    });\n\n    return result;\n  }\n\n  transformToTimeSeriesUpdate(logData) {\n    let result = [];\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        result.push(parseFloat(line[3]));\n      }\n    }\n    return result;\n  }\n\n  logChartsRow() {\n    if(this.state.logData) {\n\n      let updateData = this.transformToTimeSeriesUpdate(this.state.logData);\n\n      return <Row>\n        <Col>\n          <VictoryChart domainPadding={20} width={1200} height={300}>\n            <VictoryAxis label=\"Draws\" fixLabelOverlap={true}/>\n            <VictoryAxis label=\"Reward (kH/s)\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n            <VictoryLine data={updateData}\n                         style={{ data: { strokeWidth: 1, strokeLinecap: \"round\" } }}/>\n          </VictoryChart>\n        </Col>\n      </Row>\n    } else {\n      return <Row>\n        <Col xs={12} md={12} lg={12} style={{margin:\"20px\"}}>\n          <div>Upload your log file to see log related charts</div>\n        </Col>\n      </Row>\n    }\n  }\n\n  countChartsRow() {\n    if(this.state.stateData) {\n      let countData = this.transformToChartData(this.state.stateData.counts);\n      let rewardData = this.transformToChartData(this.state.stateData.values);\n\n      return <div>\n          <Col>\n            <VictoryChart domainPadding={20}>\n              <VictoryAxis label=\"Arms\" fixLabelOverlap={true}/>\n              <VictoryAxis label=\"Draw Count\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n              <VictoryBar data={countData} x=\"arm\" y=\"val\"/>\n            </VictoryChart>\n          </Col>\n          <Col>\n            <VictoryChart domainPadding={20}>\n              <VictoryAxis label=\"Arms\" fixLabelOverlap={true}/>\n              <VictoryAxis label=\"Average Reward (kH/s)\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n              <VictoryBar data={rewardData} x=\"arm\" y=\"val\"/>\n            </VictoryChart>\n          </Col>\n        </div>\n    } else {\n      return <Col xs={12} md={12} lg={12} style={{margin:\"20px\"}}>\n          <div>Upload your state file to see state related charts</div>\n        </Col>\n    }\n  }\n\n  highest(data) {\n    var arm = \"?\"\n    var max = -1;\n    for (var key in data) {\n      if (!data.hasOwnProperty(key)) continue;\n      var val = data[key];\n\n      if(val > max) {\n        max = val\n        arm = key\n      }\n    }\n    return [this.niceName(arm), max];\n  }\n\n  stateDataSummary() {\n    if(this.state.stateData) {\n      let [hRewardArm, hReward] = this.highest(this.state.stateData.values);\n      let [hCountArm, hCount] = this.highest(this.state.stateData.counts);\n\n      return <div>\n        <div>Arm with highest reward: {hRewardArm} ({hReward.toPrecision(4)})</div>\n        <div>Arm with highest count: {hCountArm} ({hCount})</div>\n     </div>\n   }\n  }\n\n  minMaxReward(logData) {\n    var min = Number.MAX_SAFE_INTEGER;\n    var max = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        let reward = parseFloat(line[3]);\n        if(reward < min) {\n          min = reward\n        }\n        if(reward > max) {\n          max = reward\n        }\n      }\n    }\n    return [min, max];\n  }\n\n  regretAndAvg(logData, max) {\n    let regret = 0;\n    let sum  = 0;\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        let reward = parseFloat(line[3]);\n        regret += max - reward;\n        sum += reward\n      }\n    }\n    let avg = sum/logData.data.length;\n    return [regret, avg];\n  }\n\n  logDataSummary() {\n    if(this.state.logData) {\n\n      let [min, max] = this.minMaxReward(this.state.logData);\n      let [regret, avg] = this.regretAndAvg(this.state.logData, max);\n\n      return <div>\n        <div>&nbsp;</div>\n        <div>Total regret: {regret.toPrecision(4)} kH/s</div>\n        <div>Min. reward: {min.toPrecision(4)} kH/s</div>\n        <div>Max. reward: {max.toPrecision(4)} kH/s</div>\n        <div>Avg. reward: {avg.toPrecision(4)} kH/s</div>\n      </div>\n    }\n  }\n\n  summaryPanel() {\n    if(this.state.stateData || this.state.logData) {\n      return <Col xs={12} md={6} lg={4}>\n        <Card>\n          {this.stateDataSummary()}\n          {this.logDataSummary()}\n        </Card>\n      </Col>\n    }\n  }\n\n  renderCharts() {\n      return <Container>\n        <Row>\n          {this.countChartsRow()}\n          {this.summaryPanel()}\n        </Row>\n        {this.logChartsRow()}\n      </Container>\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n        {this.navigation()}\n        </header>\n        <main>\n        {this.renderCharts()}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}