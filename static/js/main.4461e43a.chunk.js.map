{"version":3,"sources":["App.js","index.js"],"names":["AppState","App","props","state","e","app","this","reader","FileReader","onloadend","setState","stateData","JSON","parse","result","readAsText","target","files","Papa","complete","results","logData","console","log","Navbar","fixed","className","Brand","href","Form","inline","Badge","pill","variant","style","display","minWidth","Group","FormControl","type","onChange","stateSelect","logSelect","str","split","vals","key","hasOwnProperty","push","arm","niceName","val","sort","a","b","parseInt","i","data","length","line","parseFloat","updateData","transformToTimeSeriesUpdate","Row","Col","xs","md","lg","domainPadding","width","height","label","fixLabelOverlap","dependentAxis","axisLabelComponent","dy","strokeWidth","strokeLinecap","margin","countData","transformToChartData","counts","rewardData","values","x","y","max","highest","hRewardArm","hReward","hCountArm","hCount","toPrecision","min","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","reward","regret","sum","minMaxReward","regretAndAvg","avg","Card","stateDataSummary","logDataSummary","Container","countChartsRow","summaryPanel","logChartsRow","navigation","renderCharts","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4461e43a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryLabel, VictoryLine } from 'victory';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Container from 'react-bootstrap/Container'\nimport Card from 'react-bootstrap/Card'\nimport Badge from 'react-bootstrap/Badge'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Form from 'react-bootstrap/Form'\nimport Navbar from 'react-bootstrap/Navbar'\nimport * as Papa from 'papaparse'\n\nclass AppState {\n  stateData: Object\n  logData: Object\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = new AppState();\n  }\n\n  stateSelect(e) {\n    let app = this;\n    let reader = new FileReader();\n    reader.onloadend = () => {\n      app.setState({stateData: JSON.parse(reader.result)});\n    };\n    reader.readAsText(e.target.files[0]);\n  }\n\n  logSelect(e) {\n    let app = this;\n    Papa.parse(e.target.files[0], {\n      complete: function(results) {\n        app.setState({logData: results});\n        console.log(\"result=\", results);\n      }\n    })\n  }\n\n  navigation() {\n    return <Navbar fixed=\"top\" className=\"navbar-expand-sm justify-content-end\">\n          \n                <Navbar.Brand>\n                  <a href=\"#home\">Bandit Tools</a>\n                </Navbar.Brand>\n                \n                <Form inline>\n                   <Badge pill variant=\"info\" style={{display:\"inline-block\", minWidth: \"70px\"}}>State File:</Badge>\n                   <Form.Group>\n                     <FormControl type=\"file\" onChange={(e) => this.stateSelect(e)}/>\n                   </Form.Group>{' '}\n                </Form>\n                <Form inline>\n                   <Badge pill variant=\"info\" style={{display:\"inline-block\", minWidth: \"70px\"}}>Log File:</Badge>\n                   <Form.Group>\n                     <FormControl type=\"file\" onChange={(e) => this.logSelect(e)}/>\n                   </Form.Group>{' '}\n                </Form>\n           </Navbar>\n  }\n\n  niceName(str) {\n    return str.split(\":\")[1];\n  }\n\n  transformToChartData(vals) {\n    let result = [];\n\n    for (var key in vals) {\n      if (!vals.hasOwnProperty(key)) continue;\n      result.push({arm: this.niceName(key), val: vals[key]});\n    }\n\n    result.sort((a, b) => {\n        let t1 = parseInt(a.arm, 10);\n        let t2 = parseInt(b.arm, 10);\n        return t1 - t2;\n    });\n\n    return result;\n  }\n\n  transformToTimeSeriesUpdate(logData) {\n    let result = [];\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        result.push(parseFloat(line[3]));\n      }\n    }\n    return result;\n  }\n\n  logChartsRow() {\n    if(this.state.logData) {\n\n      let updateData = this.transformToTimeSeriesUpdate(this.state.logData);\n\n      return <Row>\n        <Col xs={12} md={6} lg={12}>\n          <VictoryChart domainPadding={20} width={1200} height={300}>\n            <VictoryAxis label=\"Draws\" fixLabelOverlap={true}/>\n            <VictoryAxis label=\"Reward (kH/s)\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n            <VictoryLine data={updateData}\n                         style={{ data: { strokeWidth: 1, strokeLinecap: \"round\" } }}/>\n          </VictoryChart>\n        </Col>\n      </Row>\n    } else {\n      return <Row>\n        <Col xs={12} md={12} lg={12} style={{margin:\"20px\"}}>\n          <div>Upload your log file to see log related charts</div>\n        </Col>\n      </Row>\n    }\n  }\n\n  countChartsRow() {\n    if(this.state.stateData) {\n      let countData = this.transformToChartData(this.state.stateData.counts);\n      let rewardData = this.transformToChartData(this.state.stateData.values);\n\n      return <div>\n          <Col xs={12} md={6} lg={4}>\n            <VictoryChart domainPadding={20}>\n              <VictoryAxis label=\"Arms\" fixLabelOverlap={true}/>\n              <VictoryAxis label=\"Draw Count\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n              <VictoryBar data={countData} x=\"arm\" y=\"val\"/>\n            </VictoryChart>\n          </Col>\n          <Col xs={12} md={6} lg={4}>\n            <VictoryChart domainPadding={20}>\n              <VictoryAxis label=\"Arms\" fixLabelOverlap={true}/>\n              <VictoryAxis label=\"Average Reward (kH/s)\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n              <VictoryBar data={rewardData} x=\"arm\" y=\"val\"/>\n            </VictoryChart>\n          </Col>\n        </div>\n    } else {\n      return <Col xs={12} md={12} lg={12} style={{margin:\"20px\"}}>\n          <div>Upload your state file to see state related charts</div>\n        </Col>\n    }\n  }\n\n  highest(data) {\n    var arm = \"?\"\n    var max = -1;\n    for (var key in data) {\n      if (!data.hasOwnProperty(key)) continue;\n      var val = data[key];\n\n      if(val > max) {\n        max = val\n        arm = key\n      }\n    }\n    return [this.niceName(arm), max];\n  }\n\n  stateDataSummary() {\n    if(this.state.stateData) {\n      let [hRewardArm, hReward] = this.highest(this.state.stateData.values);\n      let [hCountArm, hCount] = this.highest(this.state.stateData.counts);\n\n      return <div>\n        <div>Arm with highest reward: {hRewardArm} ({hReward.toPrecision(4)})</div>\n        <div>Arm with highest count: {hCountArm} ({hCount})</div>\n     </div>\n   }\n  }\n\n  minMaxReward(logData) {\n    var min = Number.MAX_SAFE_INTEGER;\n    var max = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        let reward = parseFloat(line[3]);\n        if(reward < min) {\n          min = reward\n        }\n        if(reward > max) {\n          max = reward\n        }\n      }\n    }\n    return [min, max];\n  }\n\n  regretAndAvg(logData, max) {\n    let regret = 0;\n    let sum  = 0;\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        let reward = parseFloat(line[3]);\n        regret += max - reward;\n        sum += reward\n      }\n    }\n    let avg = sum/logData.data.length;\n    return [regret, avg];\n  }\n\n  logDataSummary() {\n    if(this.state.logData) {\n\n      let [min, max] = this.minMaxReward(this.state.logData);\n      let [regret, avg] = this.regretAndAvg(this.state.logData, max);\n\n      return <div>\n        <div>&nbsp;</div>\n        <div>Total regret: {regret.toPrecision(4)} kH/s</div>\n        <div>Min. reward: {min.toPrecision(4)} kH/s</div>\n        <div>Max. reward: {max.toPrecision(4)} kH/s</div>\n        <div>Avg. reward: {avg.toPrecision(4)} kH/s</div>\n      </div>\n    }\n  }\n\n  summaryPanel() {\n    if(this.state.stateData || this.state.logData) {\n      return <Col xs={12} md={6} lg={4}>\n        <Card>\n          {this.stateDataSummary()}\n          {this.logDataSummary()}\n        </Card>\n      </Col>\n    }\n  }\n\n  renderCharts() {\n      return <Container>\n        <Row>\n          {this.countChartsRow()}\n          {this.summaryPanel()}\n        </Row>\n        {this.logChartsRow()}\n      </Container>\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n        {this.navigation()}\n        </header>\n        <main>\n        {this.renderCharts()}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}