{"version":3,"sources":["App.js","index.js"],"names":["AppState","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","e","app","reader","FileReader","onloadend","setState","stateData","JSON","parse","result","readAsText","target","files","Papa","complete","results","logData","console","log","_this2","react_default","a","createElement","Navbar","staticTop","Header","Brand","href","Nav","pullRight","Form","Label","bsStyle","style","display","minWidth","FormGroup","FormControl","type","onChange","stateSelect","logSelect","str","split","vals","key","hasOwnProperty","push","arm","niceName","val","sort","b","parseInt","i","data","length","line","parseFloat","updateData","transformToTimeSeriesUpdate","Row","Col","xs","md","lg","victory_chart","domainPadding","width","height","victory_axis","label","fixLabelOverlap","dependentAxis","axisLabelComponent","victory_label","dy","victory_line","strokeWidth","strokeLinecap","margin","countData","transformToChartData","counts","rewardData","values","victory_bar","x","y","max","_this$highest","highest","_this$highest2","slicedToArray","hRewardArm","hReward","_this$highest3","_this$highest4","hCountArm","hCount","toPrecision","min","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","reward","regret","sum","_this$minMaxReward","minMaxReward","_this$minMaxReward2","_this$regretAndAvg","regretAndAvg","_this$regretAndAvg2","avg","Panel","stateDataSummary","logDataSummary","Grid","countChartsRow","summaryPanel","logChartsRow","navigation","renderCharts","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c44c9462.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { VictoryBar, VictoryChart, VictoryAxis, VictoryLabel, VictoryLine } from 'victory';\nimport { Nav, Navbar, FormGroup, FormControl, Label, Grid, Row, Col, Panel } from 'react-bootstrap';\nimport * as Papa from 'papaparse'\n\nclass AppState {\n  stateData: Object\n  logData: Object\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = new AppState();\n  }\n\n  stateSelect(e) {\n    let app = this;\n    let reader = new FileReader();\n    reader.onloadend = () => {\n      app.setState({stateData: JSON.parse(reader.result)});\n    };\n    reader.readAsText(e.target.files[0]);\n  }\n\n  logSelect(e) {\n    let app = this;\n    Papa.parse(e.target.files[0], {\n      complete: function(results) {\n        app.setState({logData: results});\n        console.log(\"result=\", results);\n      }\n    })\n  }\n\n  navigation() {\n    return <Navbar staticTop>\n              <Navbar.Header>\n                <Navbar.Brand>\n                  <a href=\"#home\">Bandit Tools</a>\n                </Navbar.Brand>\n              </Navbar.Header>\n              <Nav pullRight>\n                <Navbar.Form>\n                   <Label bsStyle=\"info\" style={{display:\"inline-block\", minWidth: \"70px\"}}>State File:</Label>\n                   <FormGroup>\n                     <FormControl type=\"file\" onChange={(e) => this.stateSelect(e)}/>\n                   </FormGroup>{' '}\n                </Navbar.Form>\n                <Navbar.Form>\n                   <Label bsStyle=\"info\" style={{display:\"inline-block\", minWidth: \"70px\"}}>Log File:</Label>\n                   <FormGroup>\n                     <FormControl type=\"file\" onChange={(e) => this.logSelect(e)}/>\n                   </FormGroup>{' '}\n                </Navbar.Form>\n              </Nav>\n           </Navbar>\n  }\n\n  niceName(str) {\n    return str.split(\":\")[1];\n  }\n\n  transformToChartData(vals) {\n    let result = [];\n\n    for (var key in vals) {\n      if (!vals.hasOwnProperty(key)) continue;\n      result.push({arm: this.niceName(key), val: vals[key]});\n    }\n\n    result.sort((a, b) => {\n        let t1 = parseInt(a.arm, 10);\n        let t2 = parseInt(b.arm, 10);\n        return t1 - t2;\n    });\n\n    return result;\n  }\n\n  transformToTimeSeriesUpdate(logData) {\n    let result = [];\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        result.push(parseFloat(line[3]));\n      }\n    }\n    return result;\n  }\n\n  logChartsRow() {\n    if(this.state.logData) {\n\n      let updateData = this.transformToTimeSeriesUpdate(this.state.logData);\n\n      return <Row>\n        <Col xs={12} md={6} lg={12}>\n          <VictoryChart domainPadding={20} width={1200} height={300}>\n            <VictoryAxis label=\"Draws\" fixLabelOverlap={true}/>\n            <VictoryAxis label=\"Reward (kH/s)\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n            <VictoryLine data={updateData}\n                         style={{ data: { strokeWidth: 1, strokeLinecap: \"round\" } }}/>\n          </VictoryChart>\n        </Col>\n      </Row>\n    } else {\n      return <Row>\n        <Col xs={12} md={12} lg={12} style={{margin:\"20px\"}}>\n          <div>Upload your log file to see log related charts</div>\n        </Col>\n      </Row>\n    }\n  }\n\n  countChartsRow() {\n    if(this.state.stateData) {\n      let countData = this.transformToChartData(this.state.stateData.counts);\n      let rewardData = this.transformToChartData(this.state.stateData.values);\n\n      return <div>\n          <Col xs={12} md={6} lg={4}>\n            <VictoryChart domainPadding={20}>\n              <VictoryAxis label=\"Arms\" fixLabelOverlap={true}/>\n              <VictoryAxis label=\"Draw Count\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n              <VictoryBar data={countData} x=\"arm\" y=\"val\"/>\n            </VictoryChart>\n          </Col>\n          <Col xs={12} md={6} lg={4}>\n            <VictoryChart domainPadding={20}>\n              <VictoryAxis label=\"Arms\" fixLabelOverlap={true}/>\n              <VictoryAxis label=\"Average Reward (kH/s)\" dependentAxis={true} axisLabelComponent={<VictoryLabel dy={-12}/>}/>\n              <VictoryBar data={rewardData} x=\"arm\" y=\"val\"/>\n            </VictoryChart>\n          </Col>\n        </div>\n    } else {\n      return <Col xs={12} md={12} lg={12} style={{margin:\"20px\"}}>\n          <div>Upload your state file to see state related charts</div>\n        </Col>\n    }\n  }\n\n  highest(data) {\n    var arm = \"?\"\n    var max = -1;\n    for (var key in data) {\n      if (!data.hasOwnProperty(key)) continue;\n      var val = data[key];\n\n      if(val > max) {\n        max = val\n        arm = key\n      }\n    }\n    return [this.niceName(arm), max];\n  }\n\n\n  stateDataSummary() {\n    if(this.state.stateData) {\n      let [hRewardArm, hReward] = this.highest(this.state.stateData.values);\n      let [hCountArm, hCount] = this.highest(this.state.stateData.counts);\n\n      return <div>\n        <div>Arm with highest reward: {hRewardArm} ({hReward.toPrecision(4)})</div>\n        <div>Arm with highest count: {hCountArm} ({hCount})</div>\n     </div>\n   }\n  }\n\n  minMaxReward(logData) {\n    var min = Number.MAX_SAFE_INTEGER;\n    var max = Number.MIN_SAFE_INTEGER;\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        let reward = parseFloat(line[3]);\n        if(reward < min) {\n          min = reward\n        }\n        if(reward > max) {\n          max = reward\n        }\n      }\n    }\n    return [min, max];\n  }\n\n  regretAndAvg(logData, max) {\n    let regret = 0;\n    let sum  = 0;\n    for (let i = 0; i < logData.data.length; i++) {\n      let line = logData.data[i];\n      if (line[0] === \"UPDATE\") {\n        let reward = parseFloat(line[3]);\n        regret += max - reward;\n        sum += reward\n      }\n    }\n    let avg = sum/logData.data.length;\n    return [regret, avg];\n  }\n\n  logDataSummary() {\n    if(this.state.logData) {\n\n      let [min, max] = this.minMaxReward(this.state.logData);\n      let [regret, avg] = this.regretAndAvg(this.state.logData, max);\n\n      return <div>\n        <div>&nbsp;</div>\n        <div>Total regret: {regret.toPrecision(4)} kH/s</div>\n        <div>Min. reward: {min.toPrecision(4)} kH/s</div>\n        <div>Max. reward: {max.toPrecision(4)} kH/s</div>\n        <div>Avg. reward: {avg.toPrecision(4)} kH/s</div>\n      </div>\n    }\n  }\n\n  summaryPanel() {\n    if(this.state.stateData || this.state.logData) {\n      return <Col xs={12} md={6} lg={4}>\n        <Panel>\n          {this.stateDataSummary()}\n          {this.logDataSummary()}\n        </Panel>\n      </Col>\n    }\n  }\n\n  renderCharts() {\n      return <Grid>\n        <Row>\n          {this.countChartsRow()}\n          {this.summaryPanel()}\n        </Row>\n        {this.logChartsRow()}\n      </Grid>\n  }\n\n  render() {\n    return (\n      <div>\n        <header>\n        {this.navigation()}\n        </header>\n        <main>\n        {this.renderCharts()}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}